@startuml

class Serveur {
    - LOG: Logger
    - password: String
    - usageMessage: String
    - maxNbConnection: int
    - connections: List<Connection>
    - threads: List<Thread>
    - serverSocket: ServerSocket
    - connectionGroup: ThreadGroup
    + run(args: String[]): void
    - processCommand(cmd: String): boolean
    - getNotAloneConnections(): List<Connection>
    + solutionFound(connection: Connection, solution: Solution): void
    + statusObtained(connection: Connection, status: String): void
    + addConnexion(): void
    - generateWork(difficulty: int): String
    - validateWork(difficulty: int, nonce: String, hash: String): int
    + main(args: String[]): void
}


class Connection implements Runnable {
    - ConnectionStatus connectionStatus
    - final String password
    - Order currentOrder
    - PrintWriter writer
    - BufferedReader reader
    - Socket socket
    - int number
    - Serveur serveur
    - ServerSocket serverSocket
    - static final Logger LOG

    + Connection(String password, Serveur serveur, int number, ServerSocket serverSocket, boolean debug)
    + void run()
    + void setNewOrder(Order order)
    + void cancelOrder()
    + void tooSlow()
    + void obtainStatus()
    + void killConnection()

    - void do4WaysHello() throws IOException
    - void processMessage(String message) throws IOException
    - void killConnection(Socket socket, PrintWriter writer, BufferedReader reader) throws IOException

    + Order getCurrentOrder()
    + int getNumber()
    + ConnectionStatus getConnectionStatus()
}

class Solution {
    -hash: String
    -nonce: String
    +Solution(hash: String, nonce: String)
    +getHash(): String
    +getNonce(): String
}

class Order {
    -start: int
    -increment: int
    -difficulty: int
    -payload: String
    +Order(start: int, increment: int, difficulty: int, payload: String)
    +getStart(): int
    +getIncrement(): int
    +getDifficulty(): int
    +getPayload(): String
    +setStart(start: int): void
    +setIncrement(increment: int): void
    +setDifficulty(difficulty: int): void
    +setPayload(payload: String): void
}

enum ConnectionStatus {
    ALONE
    IDLE
    WORKING
    DEAD
}


Serveur --> "1..maxNbConnection" Connection
Connection --> ConnectionStatus : connectionStatus
Connection --> Order : "currentOrder"
@enduml
